local AArange, Erange = 550, 550

Callback.Bind('Load', function()
    
    Callback.Bind('GameStart', function() OnGameStart() end)

end)

function OnGameStart()
    if myHero.charName ~= 'Vayne' then return end

    Color = { Red = Graphics.ARGB(0xFF,0xFF,0,0),
            Green = Graphics.ARGB(0xFF,0,0xFF,0),
            Blue = Graphics.ARGB(0xFF,0,0,0xFF),
            White = Graphics.ARGB(0xFF,0xFF,0xFF,0xFF)
            }

    Vayne = AddonConfig('Bat Vayne') {
        Combo = AddonConfig.Menu('Combo') {
            Combo = AddonConfig.Section("Skills Config") {
                Quse = AddonConfig.Boolean("Use Q - Tumble", true),
                --Ruse = AddonConfig.Boolean("Use R - Final Hour", false),
                },      
        },
        Farm = AddonConfig.Menu('Farm') {
            LaneClear = AddonConfig.Section("Lane Clear") {
                --Quse = AddonConfig.Boolean("Use Q - Tumble", true), 
                --Euse = AddonConfig.Boolean("Use E - Wuju Style", false), 
            },
        },
        Condemn = AddonConfig.Menu('Condemn') {
            Settings = AddonConfig.Section("Settings") {
               Condemn = AddonConfig.KeyBinding('Condemn', 'SPACE'),
               Toggle = AddonConfig.Boolean("Auto-Condemn Toggle", true),
            }
        },
        Misc = AddonConfig.Menu('Misc') {
            Wall = AddonConfig.Section("Wall Tumble") {
               --Mid = AddonConfig.KeyBinding('Mid Wall Key', 'K'),
               Drake = AddonConfig.KeyBinding('Drake Wall Key', 'L'),
            }
        },
        Draw = AddonConfig.Menu('Drawing') {
            Enable = AddonConfig.Boolean("Enable Drawings", true), 
                Skills = AddonConfig.Section("Skills Range") {
                    Edraw = AddonConfig.Boolean("E - Condemn", false),
            },
            Items = AddonConfig.Section("Items Range") {
                Bilgewater = AddonConfig.Boolean("Bilgewater Cutlass", false),
                Botrk = AddonConfig.Boolean("Blade of the Ruined King", false),
            },

        },
        Keys = AddonConfig.Section("Keys") {
            AutoCarry = AddonConfig.KeyBinding('Combo', 'SPACE'),
            MixedMode = AddonConfig.KeyBinding('Harass', 'C'),
            LaneClear = AddonConfig.KeyBinding('LaneClear', 'V'),
            LastHit = AddonConfig.KeyBinding('LastHit', 'X'),
            },
        }
        
        

    Game.Chat.Print("<font color=\"#E31919\"><b>Bat Vayne: </b></font><font color=\"#000000\">Version 1.0 loaded</b></font>")

    Callback.Bind('Draw', function() OnDraw() end)
    Callback.Bind('Tick', function() OnTick() end)
    Callback.Bind('ProcessSpell', function(unit, spell) OnProcessSpell(unit, spell) end)


end

function OnTick()
    Checks()
    Condemn()

    Target = SxOrb:GetTarget()
    
    if Keyboard.KeysDown(Vayne.Misc.Wall.Drake:Value()) or Keyboard.KeysDown(Vayne.Misc.Wall.Mid:Value()) then
        TumbleWall()
    end
    
end

function OnProcessSpell(unit, spell)

    local SpellT = spell.target
    if unit.isMe and spell.name:lower():find("attack") then
        if SpellT.type == myHero.type and AutoCarry and Qcombo then
            Utility.DelayAction(function() myHero:CastSpell(0, mousePos.x, mousePos.z) end, spell.windUpTime*1000 + Game.Latency())
        end
    end

    --[[elseif LaneClear and Qfarm then
            Utility.DelayAction(function() myHero:CastSpell(0, mousePos.x, mousePos.z) end, spell.windUpTime*1000 + Game.Latency())
        end]]

end

-- pqmailer --
function Condemn()

    if (Estun or Etoggle) and Eready then
        for i=1, Game.HeroCount() do
            local hero = Game.Hero(i)
            if hero and hero.valid and not hero.dead and hero.team ~= myHero.team and hero.isTargetable and math.abs(hero.x - myHero.x) < 1000 and math.abs(hero.z - myHero.z) < 1000 and myHero:DistanceTo(hero) <= 550 then
                local predictedPos = positionAfter(getWayPoints(hero), 0.25 + myHero:DistanceTo(hero) / 1600, hero.ms)
                local afterKnock = predictedPos + 300 * (predictedPos - myHero.pos:To2D()):Normalize()
                if Game.IsWall(Geometry.Vector3(afterKnock.x, myHero.y, afterKnock.y)) then
                    myHero:CastSpell(2, hero)
                end
            end
        end
    end
end

function TumbleWall()

    if Keyboard.KeysDown(Vayne.Misc.Wall.Drake:Value()) and myHero.x < 11540 or myHero.x > 11600 or myHero.z < 4638 or myHero.z > 4712 then
        myHero:Move(11590.95, 4656.26)
    else
        myHero:Move(11590.95, 4656.26)
        myHero:CastSpell(0, 11334.74, 4517.47)
    end

end

--Returns the current waypoints from a unit
function getWayPoints(object)
    local result = {}
    result[1] = object.pos:To2D()
    if object.hasMovePath then
        for i = object.pathIndex, object.pathCount do
            local pathPoint = object:GetPath(i)
            if pathPoint then
                result[#result + 1] = pathPoint:To2D()
            end
        end
    end
    return result
end

--Returns the position after t seconds in a path
function positionAfter(path, t, speed)
    speed = speed or math.huge
    totalDistance = t * speed

    for i = 1, #path - 1 do
        local dist = path[i]:DistanceTo(path[i+1])
        if dist < totalDistance then
            totalDistance = totalDistance - dist
        else
            return path[i] + totalDistance * (path[i + 1] - path[i]):Normalize()
        end
    end

    return path[#path]
end
-- --

function Checks()
    
    Qready = (myHero:CanUseSpell(0) == 0)
    Wready = (myHero:CanUseSpell(1) == 0)
    Eready = (myHero:CanUseSpell(2) == 0)
    Rready = (myHero:CanUseSpell(3) == 0)

    Qcombo = Vayne.Combo.Combo.Quse:Value()
    Rcombo = Vayne.Combo.Combo.Ruse:Value()

    QFarm = Vayne.Farm.LaneClear.Quse:Value()

    AutoCarry = Keyboard.KeysDown(Vayne.Keys.AutoCarry:Value())
    MixedMode = Keyboard.KeysDown(Vayne.Keys.MixedMode:Value())
    LaneClear = Keyboard.KeysDown(Vayne.Keys.LaneClear:Value())
    LastHit = Keyboard.KeysDown(Vayne.Keys.LastHit:Value())

    Etoggle = Vayne.Condemn.Settings.Toggle:Value()
    Estun = Keyboard.KeysDown(Vayne.Condemn.Settings.Condemn:Value())


end

function OnDraw()

    if Vayne.Draw.Enable:Value() then
        -- Skills --
        if (Vayne.Draw.Skills.Edraw:Value()) and Eready then
            Graphics.DrawCircle(myHero, Erange, Color.White)
        end
        -- Items --
        if (Vayne.Draw.Items.Bilgewater:Value()) or (Vayne.Draw.Items.Botrk:Value()) then
            Graphics.DrawCircle(myHero, 450, Color.White)
        end
    end
end